
# Clean Code
---
## Chapter 1: 깨끗한 코드
- 르블랑의 법칙
- 중복을 피하라, 한 기능만 수행하라, 제대로 표현하라, 작게 추상화하라 
- 코드를 짜는 시간 보다 코드를 읽는 시간이 더 많아야 한다 10대1의 비율
- 주변 코드를 읽지 않으면 새로운 코드를 짤 수 없다.

## Chapter 2: 깨끗한 코드
- 의도를 분명히 밝혀라
- 그릇된 정보를 파악하라
- 의미있게 구분하라
- 발음하기 쉬운 이름을 사용하라
- 검색하기 쉬운 이름을 사용하라
- 인코딩을 피하라
- 자신의 기억력을 자랑하지 마라
- 기발한 이름을 피하라
- 한 개념에 한 단어를 사용하라
- 말 장난을 하지 마라
- 해법 영역에서 가져온 이름을 사용하라
- 문제 영역에서 가져온 이름을 사용하라
- 의미 있는 맥락을 추가하라
- 불필요한 맥락을 없애라

## Chapter 3: 함수
- 작게 만들어라
- 한가지만 해라
- 함수당 추상화 수준은 하나로
위에서 아래로 코드 읽기: 내려가기 규칙
- 서술적인 이름을 사용하라
- 함수 인수
단항 형식, 플래그 인수, 이항 함수, 삼항 함수, 인수 목록
- 부수 효과를 일으키지 마라
- 명령과 조회를 분리하라
- 오류 코드보다 예외를 사용하라
- 반복하지 마라


## Chapter 4: 주석

### 주석은 나쁜 코드를 보완하지 못한다.
코드를 추가하는 이유는 코드 품질이 나쁘기 때문이다. 
표현력이 풍부하고 깔끔하며 주석이 없는 코드를 작성하자 
나쁜 코드를 작성한 이유보다는 깨끗한 코드를 작성하는데 시간을 사용하자

- 코드로 의도를 표현하라
메서드 명을 이용해서 무엇을 하고자 하는지 의도를 표현하자

## 좋은 주석
### 법적인 주석
계약조건, 저작권 정보, 소유권 정보 등 조항과 조건 열거하는 대신 표준라이선스나 외부문서 참조

### 정보를 제공하는 주석
기본 적인 정보를 주석으로 제공하면 편리하지만 함수 이름에 정보를 담으면 주석을 달 필요가 없어진다.

### 의도를 설명하는 주석

### 의미를 명료하게 밝히는 주석
인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드일 경우 의미를 명료하게 밝히는 주석

### 결과를 경고하는 주석
ex) 특정 테스트 케이스를 꺼야 하는 이유를 설명하는 주석

### todo주석
당장 구현하기 어려운 업무, 필요없는 기능을 삭제, 요청, 주의 등에 유용하지만 주기적으로 점검하면서 없애도 괜찮은 주석을 제거

### 중요성을 강조하는 주석

## 나쁜 주석

### 주절거리는 주석
의무감 혹은 프로세스에서 달라고 해서 다는 주석들은 시간 낭비다 주석을 달기로 마음 먹었으면 충분한 시간을 들여서 좋은 주석을 달자

### 같은 이야기를 중복하는 주석

### 오해할 여지가 있는 주석
잘못된 정보로 인해서 예상한 결과와 다른 상황이 발생 그 원인을 찾기 위해서 주석을 읽는 사람이 고생한다.

### 의무적으로 다는 주석
모든 함수나 변수에 주석을 달면 코드를 복잡하게 만들고 오히려 코드를 헷갈리게 만든다.

### 이력을 기록하는 주석
변경 이력을 기록하고 관리하는 소스 코드 관리 시스템이 없었을 시기에 모듈을 편집할 때마다 모듈의 첫머리에 주석을 추가 하는 행위 지금은 혼란만 주는 주석이므로 사용하지 않는다.

### 있으나 마나 한 주석
너무 당연한 사실을 언급하거나 새로운 정보를 제공하지 못하는 주석
변수를 변수라고 알려주는 주석, 생성자를 생성자라고 알려주는 주석 등 

### 함수나 변수로 표현할 수 있다면 주석을 달지마라
함수나 변수 명을 통해서 의미를 전달 할 수 있는 코드를 작성하자

### 위치를 표시하는 주석
소스파일의 특정 위치를 알려주기 위한 주석

### 닫는 괄호에 다는 주석
중첩이 심하고 장황환 함수라면 의미가 있을지 모르지만 작고 캡슐화된 함수에는 잡음일 뿐 그 시간에 함수를 줄이자

### 공로를 돌리거나 저자를 표시하는 주석
현재 코드를 누가 구현했는지 다는 주석
코드 변경에 대한 정보는 소스 코드 관리 시스템에 저장하는 편이 좋다.

### 주석으로 처리한 코드
다른 사람이 중요한 코드라고 생각해서 지우기를 꺼려 할 수 있다. 
소스 코드 관리 시스템에서 코드를 대신 기억해 주니 과감하게 지워라

### HTML주석
주석은 읽기 쉽게 작성해야한다. HTML코드로 작성하게 되면 한 눈에 알아보기 어렵게 된다.

### 전역정보
주석을 달아야 한다면 근처의 있는 코드만 기술해라
시스템의 전반적인 내용을 다루게 되면 주석의 중복이 심해져서 이해하는 데 어려울 수 있다.

### 너무 많은 정보
흥미로운 역사나 관련 없는 정보를 사용하지 마라

### 모호한 관계
주석과 주석이 설명하는 코드 사이의 관계가 명확해야 한다.

### 함수 헤더
짧은 함수는 긴 설명이 필요 없다.
짧고 한 가지만 수행하며 이름을 잘 붙인 함수를 짜도록 노력하자




















